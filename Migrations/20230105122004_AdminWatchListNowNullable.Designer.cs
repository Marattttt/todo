// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Todo.Data;

#nullable disable

namespace Todo.Migrations
{
    [DbContext(typeof(TodoContext))]
    [Migration("20230105122004_AdminWatchListNowNullable")]
    partial class AdminWatchListNowNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Todo.Models.LoginInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("_login")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("login");

                    b.Property<string>("_password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("lassword");

                    b.HasKey("Id");

                    b.ToTable("login_info", (string)null);
                });

            modelBuilder.Entity("Todo.Models.Profile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProfileId"));

                    b.Property<string>("Desctription")
                        .HasColumnType("text");

                    b.HasKey("ProfileId");

                    b.ToTable("profiles", (string)null);
                });

            modelBuilder.Entity("Todo.Models.TodoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Due")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("todo_items", (string)null);
                });

            modelBuilder.Entity("Todo.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("LoginInfoId")
                        .HasColumnType("integer");

                    b.Property<string>("user_type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LoginInfoId");

                    b.ToTable("users", (string)null);

                    b.HasDiscriminator<string>("user_type").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Todo.Models.Admin", b =>
                {
                    b.HasBaseType("Todo.Models.User");

                    b.HasDiscriminator().HasValue("admin");
                });

            modelBuilder.Entity("Todo.Models.Client", b =>
                {
                    b.HasBaseType("Todo.Models.User");

                    b.Property<int?>("AdminId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("integer");

                    b.HasIndex("AdminId");

                    b.HasIndex("ProfileId");

                    b.HasDiscriminator().HasValue("client");
                });

            modelBuilder.Entity("Todo.Models.TodoItem", b =>
                {
                    b.HasOne("Todo.Models.Client", null)
                        .WithMany("TodoItems")
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("Todo.Models.User", b =>
                {
                    b.HasOne("Todo.Models.LoginInfo", "LoginInfo")
                        .WithMany()
                        .HasForeignKey("LoginInfoId");

                    b.Navigation("LoginInfo");
                });

            modelBuilder.Entity("Todo.Models.Client", b =>
                {
                    b.HasOne("Todo.Models.Admin", null)
                        .WithMany("WatchList")
                        .HasForeignKey("AdminId");

                    b.HasOne("Todo.Models.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Todo.Models.Admin", b =>
                {
                    b.Navigation("WatchList");
                });

            modelBuilder.Entity("Todo.Models.Client", b =>
                {
                    b.Navigation("TodoItems");
                });
#pragma warning restore 612, 618
        }
    }
}
